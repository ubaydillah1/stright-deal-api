// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  Google
  Apple
  Local
}

enum Role {
  Admin
  User
  Visitor
}

enum StatusReview {
  NeedToReview
  InReview
  Reviewed
  Published
  Rejected
}

enum LoanOrLeaseStatus {
  No
  Loan
  Lease
}

enum ExteriorCondition {
  MinorCosmeticDamage
  ModerateCosmeticDamages
  CrackedBodywork
  Rust
  ChippedOrCrackedGlass
  NoExteriorDamage
}

enum InteriorDamage {
  NoticeableStains
  PersistentOdors
  RipsOrTearsInSeats
  DamagedDashboardOrInteriorPanels
  NoInteriorDamage
}

enum ConditionStatus {
  Poor
  Good
  Exceptional
}

enum PlannedSaleTimeline {
  Immediately
  AlmostReady
  NotReadyYet
}

enum TiresType {
  AllSeason
  WinterTires
  SummerTires
}

enum ActionType {
  ReviewedSubmission
}

model User {
  id                           String    @id @default(uuid())
  email                        String    @unique
  firstName                    String
  lastName                     String
  password                     String?
  isEmailVerified              Boolean   @default(false)
  emailVerificationToken       String?   @unique
  emailVerificationTokenExpiry DateTime?
  phoneNumber                  String?   @unique
  isPhoneVerified              Boolean   @default(false)
  phoneOtpToken                String?   @unique
  expiredPhoneOtpToken         DateTime?
  refreshToken                 String?   @unique
  resetToken                   String?   @unique
  resetTokenExpiry             DateTime?
  provider                     Provider  @default(Local)
  avatar                       String?
  role                         Role      @default(Visitor)
  Cars                         Car[]
  createdAt                    DateTime  @default(now())
  updatedAt                    DateTime  @updatedAt

  @@index([phoneNumber])
  @@map("users")
}

model Car {
  id                          String              @id @default(uuid())
  User                        User                @relation(fields: [userId], references: [id])
  userId                      String
  vin                         String              @unique
  year                        Int
  make                        String
  model                       String
  trim                        String
  lowerPrice                  Int
  higherPrice                 Int
  miliage                     Int
  statusReview                StatusReview        @default(NeedToReview)
  loanOrLeaseStatus           LoanOrLeaseStatus
  loanCompany                 String?
  remainingBalance            Int?
  monthlyPayment              Int?
  monthsRemaining             Int?
  purchaseOptionAmount        Int?
  anyAftermarketFeatures      String?
  exteriorCondition           ExteriorCondition[]
  interiorDamage              InteriorDamage[]
  tiresType                   TiresType
  isInvolvedAccidentInsurance Boolean
  amountClaimed               String?
  overallConditionStatus      ConditionStatus
  plannedSaleTimeline         PlannedSaleTimeline
  postalCode                  String
  province                    String
  city                        String
  seen                        Boolean             @default(false)
  activityLogs                ActivityLog[]
  CarImages                   CarImage[]
  createdAt                   DateTime            @default(now())
  updatedAt                   DateTime            @updatedAt
  Notifications               Notification[]

  @@map("cars")
}

model CarImage {
  id       String @id @default(uuid())
  Car      Car    @relation(fields: [carId], references: [id])
  carId    String
  imageUrl String

  @@map("car_images")
}

model Notification {
  id            String       @id @default(uuid())
  Car           Car?         @relation(fields: [carId], references: [id])
  carId         String?
  ActivityLog   ActivityLog? @relation(fields: [activityLogId], references: [id])
  activityLogId String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("notifications")
}

model ActivityLog {
  id              String         @id @default(uuid())
  Car             Car            @relation(fields: [carId], references: [id])
  carId           String
  notes           String?
  actionType      ActionType
  Notifications   Notification[]
  statusReviewLog StatusReview
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("activity_logs")
}
